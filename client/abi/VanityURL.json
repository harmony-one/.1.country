{
  "address": "0x4b71c876539f12D405C722721879B3803E683BE3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "aliasName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "NewURLSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "RevenueAccountChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "aliasName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "URLDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "aliasName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldURL",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "newURL",
          "type": "string"
        }
      ],
      "name": "URLUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressRegistry",
      "outputs": [
        {
          "internalType": "contract IAddressRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_aliasName",
          "type": "string"
        }
      ],
      "name": "checkURLValidity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_aliasName",
          "type": "string"
        }
      ],
      "name": "deleteURL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_aliasName",
          "type": "string"
        }
      ],
      "name": "getURL",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressRegistry",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_urlUpdatePrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_revenueAccount",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nameOwnerUpdateAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revenueAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_d1dcV2TokenId",
          "type": "bytes32"
        }
      ],
      "name": "setNameOwnerUpdateAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_aliasName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_url",
          "type": "string"
        }
      ],
      "name": "setNewURL",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_revenueAccount",
          "type": "address"
        }
      ],
      "name": "setRevenueAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_aliasName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_url",
          "type": "string"
        }
      ],
      "name": "updateURL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_urlUpdatePrice",
          "type": "uint256"
        }
      ],
      "name": "updateURLUpdatePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "urlUpdatePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "vanityURLUpdatedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "vanityURLs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe1d7bca0b97cd6c8aca0559f204404433266db82df54582bc9d8fdbac107944e",
  "receipt": {
    "to": null,
    "from": "0xD0c46E5e40b38eEB3b685fD18550fC54e5aFA0F2",
    "contractAddress": "0x4b71c876539f12D405C722721879B3803E683BE3",
    "transactionIndex": 0,
    "gasUsed": "1978557",
    "logsBloom": "0x
    "blockHash": "0xb23471032ff766fdef9f8f2cb5f416a26e8c08b87665f861c485c95e93f86ba7",
    "transactionHash": "0xe1d7bca0b97cd6c8aca0559f204404433266db82df54582bc9d8fdbac107944e",
    "logs": [],
    "blockNumber": 35894595,
    "cumulativeGasUsed": "1978557",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "432269265ea1251dfd95460e509dd215",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"aliasName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"NewURLSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RevenueAccountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"aliasName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"URLDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"aliasName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldURL\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newURL\",\"type\":\"string\"}],\"name\":\"URLUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_aliasName\",\"type\":\"string\"}],\"name\":\"checkURLValidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_aliasName\",\"type\":\"string\"}],\"name\":\"deleteURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_aliasName\",\"type\":\"string\"}],\"name\":\"getURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_urlUpdatePrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_revenueAccount\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nameOwnerUpdateAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_d1dcV2TokenId\",\"type\":\"bytes32\"}],\"name\":\"setNameOwnerUpdateAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_aliasName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"setNewURL\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revenueAccount\",\"type\":\"address\"}],\"name\":\"setRevenueAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_aliasName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"updateURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_urlUpdatePrice\",\"type\":\"uint256\"}],\"name\":\"updateURLUpdatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"urlUpdatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"vanityURLUpdatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"vanityURLs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"addressRegistry\":{\"details\":\"AddressRegistry contract\"},\"nameOwnerUpdateAt\":{\"details\":\"D1DCV2 TokenId -> Timestamp the name owner was updated\"},\"revenueAccount\":{\"details\":\"Fee withdrawal address\"},\"urlUpdatePrice\":{\"details\":\"Price for the url update\"},\"vanityURLUpdatedAt\":{\"details\":\"D1DCV2 Token Id -> Alias Name -> Timestamp the URL was updatedVanity URL is valid only if nameOwnerUpdateAt <= vanityURLUpdatedAt\"},\"vanityURLs\":{\"details\":\"D1DCV2 TokenId -> Alias Name -> URL\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VanityURL.sol\":\"VanityURL\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/VanityURL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IAddressRegistry.sol\\\";\\nimport \\\"./interfaces/ID1DCV2.sol\\\";\\n\\ncontract VanityURL is\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    /// @dev AddressRegistry contract\\n    IAddressRegistry public addressRegistry;\\n\\n    /// @dev D1DCV2 TokenId -> Timestamp the name owner was updated\\n    mapping(bytes32 => uint256) public nameOwnerUpdateAt;\\n\\n    /// @dev D1DCV2 TokenId -> Alias Name -> URL\\n    mapping(bytes32 => mapping(string => string)) public vanityURLs;\\n\\n    /// @dev D1DCV2 Token Id -> Alias Name -> Timestamp the URL was updated\\n    /// @dev Vanity URL is valid only if nameOwnerUpdateAt <= vanityURLUpdatedAt\\n    mapping(bytes32 => mapping(string => uint256)) public vanityURLUpdatedAt;\\n\\n    /// @dev Price for the url update\\n    uint256 public urlUpdatePrice;\\n\\n    /// @dev Fee withdrawal address\\n    address public revenueAccount;\\n\\n    event NewURLSet(\\n        address by,\\n        string indexed name,\\n        string indexed aliasName,\\n        string indexed url\\n    );\\n    event URLDeleted(\\n        address by,\\n        string indexed name,\\n        string indexed aliasName,\\n        string indexed url\\n    );\\n    event URLUpdated(\\n        address by,\\n        string indexed name,\\n        string indexed aliasName,\\n        string oldURL,\\n        string indexed newURL\\n    );\\n    event RevenueAccountChanged(address indexed from, address indexed to);\\n\\n    modifier onlyD1DCV2NameOwner(string memory _name) {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n        ID1DCV2 d1dcV2 = ID1DCV2(addressRegistry.d1dcV2());\\n        (address nameOwner, , , , , ) = d1dcV2.nameRecords(tokenId);\\n        require(msg.sender == nameOwner, \\\"VanityURL: only D1DCV2 name owner\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _addressRegistry,\\n        uint256 _urlUpdatePrice,\\n        address _revenueAccount\\n    ) external initializer {\\n        __Pausable_init();\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        addressRegistry = IAddressRegistry(_addressRegistry);\\n        urlUpdatePrice = _urlUpdatePrice;\\n        revenueAccount = _revenueAccount;\\n    }\\n\\n    function setRevenueAccount(address _revenueAccount) public onlyOwner {\\n        emit RevenueAccountChanged(revenueAccount, _revenueAccount);\\n\\n        revenueAccount = _revenueAccount;\\n    }\\n\\n    function setNameOwnerUpdateAt(bytes32 _d1dcV2TokenId) external {\\n        address d1dcV2 = addressRegistry.d1dcV2();\\n        require(msg.sender == d1dcV2, \\\"VanityURL: only D1DCV2\\\");\\n\\n        nameOwnerUpdateAt[_d1dcV2TokenId] = block.timestamp;\\n    }\\n\\n    function updateURLUpdatePrice(uint256 _urlUpdatePrice) external onlyOwner {\\n        urlUpdatePrice = _urlUpdatePrice;\\n    }\\n\\n    function setNewURL(\\n        string calldata _name,\\n        string calldata _aliasName,\\n        string calldata _url\\n    ) external payable nonReentrant whenNotPaused onlyD1DCV2NameOwner(_name) {\\n        require(bytes(_aliasName).length <= 1024, \\\"VanityURL: alias too long\\\");\\n        require(bytes(_url).length <= 1024, \\\"VanityURL: url too long\\\");\\n\\n        bytes32 tokenId = keccak256(bytes(_name));\\n        require(\\n            !checkURLValidity(_name, _aliasName),\\n            \\\"VanityURL: url already exists\\\"\\n        );\\n\\n        uint256 price = urlUpdatePrice;\\n        require(price <= msg.value, \\\"VanityURL: insufficient payment\\\");\\n\\n        // set a new URL\\n        vanityURLs[tokenId][_aliasName] = _url;\\n        vanityURLUpdatedAt[tokenId][_aliasName] = block.timestamp;\\n\\n        // returns the exceeded payment\\n        uint256 excess = msg.value - price;\\n        if (excess > 0) {\\n            (bool success, ) = msg.sender.call{value: excess}(\\\"\\\");\\n            require(success, \\\"cannot refund excess\\\");\\n        }\\n\\n        emit NewURLSet(msg.sender, _name, _aliasName, _url);\\n    }\\n\\n    function deleteURL(string calldata _name, string calldata _aliasName)\\n        external\\n        whenNotPaused\\n        onlyD1DCV2NameOwner(_name)\\n    {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n        string memory url = vanityURLs[tokenId][_aliasName];\\n        require(checkURLValidity(_name, _aliasName), \\\"VanityURL: invalid URL\\\");\\n\\n        emit URLDeleted(msg.sender, _name, _aliasName, url);\\n\\n        // delete the URL\\n        vanityURLs[tokenId][_aliasName] = \\\"\\\";\\n        vanityURLUpdatedAt[tokenId][_aliasName] = block.timestamp;\\n    }\\n\\n    function updateURL(\\n        string calldata _name,\\n        string calldata _aliasName,\\n        string calldata _url\\n    ) external whenNotPaused onlyD1DCV2NameOwner(_name) {\\n        require(bytes(_url).length <= 1024, \\\"VanityURL: url too long\\\");\\n        \\n        bytes32 tokenId = keccak256(bytes(_name));\\n        require(checkURLValidity(_name, _aliasName), \\\"VanityURL: invalid URL\\\");\\n\\n        emit URLUpdated(\\n            msg.sender,\\n            _name,\\n            _aliasName,\\n            vanityURLs[tokenId][_aliasName],\\n            _url\\n        );\\n\\n        // update the URL\\n        vanityURLs[tokenId][_aliasName] = _url;\\n        vanityURLUpdatedAt[tokenId][_aliasName] = block.timestamp;\\n    }\\n\\n    function getURL(string calldata _name, string calldata _aliasName)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n\\n        return vanityURLs[tokenId][_aliasName];\\n    }\\n\\n    function checkURLValidity(string memory _name, string memory _aliasName)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        bytes32 tokenId = keccak256(bytes(_name));\\n        return\\n            nameOwnerUpdateAt[tokenId] <=\\n                vanityURLUpdatedAt[tokenId][_aliasName]\\n                ? true\\n                : false;\\n    }\\n\\n    function withdraw() external {\\n        require(\\n            msg.sender == owner() || msg.sender == revenueAccount,\\n            \\\"D1DC: must be owner or revenue account\\\"\\n        );\\n        (bool success, ) = revenueAccount.call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        require(success, \\\"D1DC: failed to withdraw\\\");\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x0a9fae87fd2cae6e21d9a92df31f74b9670665e35b04489475e2209c09cd37b3\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\ninterface IAddressRegistry {\\n    function d1dcV2() external view returns (address);\\n\\n    function vanityURL() external view returns (address);\\n}\\n\",\"keccak256\":\"0xfcbe3b670f7e0ef81eb9f73eedc6092eff47640d6afad176ed9556bb881d796d\",\"license\":\"MIT\"},\"contracts/interfaces/ID1DCV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\ninterface ID1DCV2 {\\n    function nameRecords(bytes32 tokenId)\\n        external\\n        view\\n        returns (\\n            address renter,\\n            uint32 timeUpdated,\\n            uint256 lastPrice,\\n            string memory url,\\n            string memory prev,\\n            string memory next\\n        );\\n}\\n\",\"keccak256\":\"0xb49aa3f6c9039026a1326d3e37269bd6479fc475b783496e43277727c39de7ad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506122d5806100206000396000f3fe6080604052600436106101355760003560e01c80638da5cb5b116100ab578063dce02fdb1161006f578063dce02fdb1461035c578063e3452cfb1461037c578063f1558de71461039c578063f2fde38b146103c9578063f3ad65f4146103e9578063f5dc7d561461040957600080fd5b80638da5cb5b146102b4578063b2867247146102e6578063c350a1b514610306578063d22da07514610326578063d6c5b8c91461033c57600080fd5b80633f4ba83a116100fd5780633f4ba83a146102115780635b9299cd146102265780635c975abb146102465780635de870c91461026a578063715018a61461028a5780638456cb591461029f57600080fd5b806305e66add1461013a57806328b431071461017057806330027f3b146101c75780633b513894146101e95780633ccfd60b146101fc575b600080fd5b34801561014657600080fd5b5061015a610155366004611b1f565b610429565b6040516101679190611b8a565b60405180910390f35b34801561017c57600080fd5b506101b961018b366004611b1f565b60cc602090815260009283526040909220815180830184018051928152908401929093019190912091525481565b604051908152602001610167565b3480156101d357600080fd5b506101e76101e2366004611bd2565b6104df565b005b6101e76101f7366004611c3f565b610543565b34801561020857600080fd5b506101e7610a2d565b34801561021d57600080fd5b506101e7610b51565b34801561023257600080fd5b506101e7610241366004611cd9565b610b63565b34801561025257600080fd5b5060655460ff165b6040519015158152602001610167565b34801561027657600080fd5b506101e7610285366004611cf2565b610b70565b34801561029657600080fd5b506101e7610f61565b3480156102ab57600080fd5b506101e7610f73565b3480156102c057600080fd5b506033546001600160a01b03165b6040516001600160a01b039091168152602001610167565b3480156102f257600080fd5b5061015a610301366004611cf2565b610f83565b34801561031257600080fd5b506101e7610321366004611d5e565b611062565b34801561033257600080fd5b506101b960cd5481565b34801561034857600080fd5b5061025a610357366004611da0565b6111bb565b34801561036857600080fd5b506101e7610377366004611cd9565b61121f565b34801561038857600080fd5b506101e7610397366004611c3f565b6112f4565b3480156103a857600080fd5b506101b96103b7366004611cd9565b60ca6020526000908152604090205481565b3480156103d557600080fd5b506101e76103e4366004611bd2565b6116a3565b3480156103f557600080fd5b5060c9546102ce906001600160a01b031681565b34801561041557600080fd5b5060ce546102ce906001600160a01b031681565b60cb60209081526000928352604090922081518083018401805192815290840192909301919091209152805461045e90611dfa565b80601f016020809104026020016040519081016040528092919081815260200182805461048a90611dfa565b80156104d75780601f106104ac576101008083540402835291602001916104d7565b820191906000526020600020905b8154815290600101906020018083116104ba57829003601f168201915b505050505081565b6104e7611719565b60ce546040516001600160a01b038084169216907fe03b0e59900b6347a6bdef98fe51689d53064c5235a2ca9fc10a27c497ec730790600090a360ce80546001600160a01b0319166001600160a01b0392909216919091179055565b61054b611773565b6105536117cc565b85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250845160208087019190912060c95460408051631177e3cf60e01b815290519297509395506001600160a01b03169350631177e3cf9260048082019392918290030181865afa1580156105db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ff9190611e34565b6040516375ba902160e11b8152600481018490529091506000906001600160a01b0383169063eb75204290602401600060405180830381865afa15801561064a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106729190810190611e9e565b50505050509050806001600160a01b0316336001600160a01b0316146106b35760405162461bcd60e51b81526004016106aa90611f5f565b60405180910390fd5b6104008711156107055760405162461bcd60e51b815260206004820152601960248201527f56616e69747955524c3a20616c69617320746f6f206c6f6e670000000000000060448201526064016106aa565b6104008511156107515760405162461bcd60e51b815260206004820152601760248201527656616e69747955524c3a2075726c20746f6f206c6f6e6760481b60448201526064016106aa565b60008a8a604051610763929190611fa0565b604051809103902090506107e08b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8f018190048102820181019092528d815292508d91508c90819084018382808284376000920191909152506111bb92505050565b1561082d5760405162461bcd60e51b815260206004820152601d60248201527f56616e69747955524c3a2075726c20616c72656164792065786973747300000060448201526064016106aa565b60cd54348111156108805760405162461bcd60e51b815260206004820152601f60248201527f56616e69747955524c3a20696e73756666696369656e74207061796d656e740060448201526064016106aa565b878760cb60008581526020019081526020016000208c8c6040516108a5929190611fa0565b908152602001604051809103902091826108c0929190611ffb565b504260cc60008481526020019081526020016000208b8b6040516108e5929190611fa0565b90815260405190819003602001902055600061090182346120bc565b9050801561099a57604051600090339083908381818185875af1925050503d806000811461094b576040519150601f19603f3d011682016040523d82523d6000602084013e610950565b606091505b50509050806109985760405162461bcd60e51b815260206004820152601460248201527363616e6e6f7420726566756e642065786365737360601b60448201526064016106aa565b505b88886040516109aa929190611fa0565b60405180910390208b8b6040516109c2929190611fa0565b60405180910390208e8e6040516109da929190611fa0565b604051908190038120338252907f13e9759ec5026e955e0e6d2ead4f13f2125d2d68a621346a3ed77c4aa5f28de19060200160405180910390a450505050505050610a256001609755565b505050505050565b6033546001600160a01b0316331480610a50575060ce546001600160a01b031633145b610aab5760405162461bcd60e51b815260206004820152602660248201527f443144433a206d757374206265206f776e6572206f7220726576656e7565206160448201526518d8dbdd5b9d60d21b60648201526084016106aa565b60ce546040516000916001600160a01b03169047908381818185875af1925050503d8060008114610af8576040519150601f19603f3d011682016040523d82523d6000602084013e610afd565b606091505b5050905080610b4e5760405162461bcd60e51b815260206004820152601860248201527f443144433a206661696c656420746f207769746864726177000000000000000060448201526064016106aa565b50565b610b59611719565b610b61611819565b565b610b6b611719565b60cd55565b610b786117cc565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250845160208087019190912060c95460408051631177e3cf60e01b815290519297509395506001600160a01b03169350631177e3cf9260048082019392918290030181865afa158015610c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c249190611e34565b6040516375ba902160e11b8152600481018490529091506000906001600160a01b0383169063eb75204290602401600060405180830381865afa158015610c6f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c979190810190611e9e565b50505050509050806001600160a01b0316336001600160a01b031614610ccf5760405162461bcd60e51b81526004016106aa90611f5f565b60008888604051610ce1929190611fa0565b60408051918290038220600081815260cb6020529182209093509091610d0a908a908a90611fa0565b90815260200160405180910390208054610d2390611dfa565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4f90611dfa565b8015610d9c5780601f10610d7157610100808354040283529160200191610d9c565b820191906000526020600020905b815481529060010190602001808311610d7f57829003601f168201915b50505050509050610e168a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b90819084018382808284376000920191909152506111bb92505050565b610e5b5760405162461bcd60e51b815260206004820152601660248201527515985b9a5d1e5554930e881a5b9d985b1a590815549360521b60448201526064016106aa565b80604051610e6991906120dd565b60405180910390208888604051610e81929190611fa0565b60405180910390208b8b604051610e99929190611fa0565b604051908190038120338252907f0ebb99856fe845dcc1e2291e7f2d8ac960cacfe58868974461990868583d62129060200160405180910390a46040518060200160405280600081525060cb60008481526020019081526020016000208989604051610f06929190611fa0565b90815260200160405180910390209081610f2091906120f9565b504260cc60008481526020019081526020016000208989604051610f45929190611fa0565b9081526040519081900360200190205550505050505050505050565b610f69611719565b610b61600061186b565b610f7b611719565b610b616118bd565b606060008585604051610f97929190611fa0565b60408051918290038220600081815260cb6020529190912090925090610fc09086908690611fa0565b90815260200160405180910390208054610fd990611dfa565b80601f016020809104026020016040519081016040528092919081815260200182805461100590611dfa565b80156110525780601f1061102757610100808354040283529160200191611052565b820191906000526020600020905b81548152906001019060200180831161103557829003601f168201915b5050505050915050949350505050565b600054610100900460ff16158080156110825750600054600160ff909116105b8061109c5750303b15801561109c575060005460ff166001145b6110ff5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106aa565b6000805460ff191660011790558015611122576000805461ff0019166101001790555b61112a6118fa565b611132611929565b61113a611958565b60c980546001600160a01b038087166001600160a01b03199283161790925560cd85905560ce80549285169290911691909117905580156111b5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b8151602080840191909120600081815260cc909252604080832090516111e29085906120dd565b90815260200160405180910390205460ca6000838152602001908152602001600020541115611212576000611215565b60015b9150505b92915050565b60c95460408051631177e3cf60e01b815290516000926001600160a01b031691631177e3cf9160048083019260209291908290030181865afa158015611269573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128d9190611e34565b9050336001600160a01b038216146112e05760405162461bcd60e51b81526020600482015260166024820152752b30b734ba3caaa9261d1037b7363c902218a221ab1960511b60448201526064016106aa565b50600090815260ca60205260409020429055565b6112fc6117cc565b85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250845160208087019190912060c95460408051631177e3cf60e01b815290519297509395506001600160a01b03169350631177e3cf9260048082019392918290030181865afa158015611384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a89190611e34565b6040516375ba902160e11b8152600481018490529091506000906001600160a01b0383169063eb75204290602401600060405180830381865afa1580156113f3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261141b9190810190611e9e565b50505050509050806001600160a01b0316336001600160a01b0316146114535760405162461bcd60e51b81526004016106aa90611f5f565b61040085111561149f5760405162461bcd60e51b815260206004820152601760248201527656616e69747955524c3a2075726c20746f6f206c6f6e6760481b60448201526064016106aa565b60008a8a6040516114b1929190611fa0565b6040518091039020905061152e8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8f018190048102820181019092528d815292508d91508c90819084018382808284376000920191909152506111bb92505050565b6115735760405162461bcd60e51b815260206004820152601660248201527515985b9a5d1e5554930e881a5b9d985b1a590815549360521b60448201526064016106aa565b8686604051611583929190611fa0565b6040518091039020898960405161159b929190611fa0565b60405180910390208c8c6040516115b3929190611fa0565b60405180910390207fb50e10d60f9b32ef3d334612dab67fef5b70a8634f47d76d0ed93a7729fec3353360cb60008781526020019081526020016000208e8e604051611600929190611fa0565b90815260405190819003602001812061161992916121b9565b60405180910390a4868660cb60008481526020019081526020016000208b8b604051611646929190611fa0565b90815260200160405180910390209182611661929190611ffb565b504260cc60008381526020019081526020016000208a8a604051611686929190611fa0565b908152604051908190036020019020555050505050505050505050565b6116ab611719565b6001600160a01b0381166117105760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106aa565b610b4e8161186b565b6033546001600160a01b03163314610b615760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106aa565b6002609754036117c55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106aa565b6002609755565b60655460ff1615610b615760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106aa565b6001609755565b611821611987565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6118c56117cc565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861184e3390565b600054610100900460ff166119215760405162461bcd60e51b81526004016106aa90612254565b610b616119d0565b600054610100900460ff166119505760405162461bcd60e51b81526004016106aa90612254565b610b61611a03565b600054610100900460ff1661197f5760405162461bcd60e51b81526004016106aa90612254565b610b61611a33565b60655460ff16610b615760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106aa565b600054610100900460ff166119f75760405162461bcd60e51b81526004016106aa90612254565b6065805460ff19169055565b600054610100900460ff16611a2a5760405162461bcd60e51b81526004016106aa90612254565b610b613361186b565b600054610100900460ff166118125760405162461bcd60e51b81526004016106aa90612254565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a9957611a99611a5a565b604052919050565b600067ffffffffffffffff821115611abb57611abb611a5a565b50601f01601f191660200190565b600082601f830112611ada57600080fd5b8135611aed611ae882611aa1565b611a70565b818152846020838601011115611b0257600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215611b3257600080fd5b82359150602083013567ffffffffffffffff811115611b5057600080fd5b611b5c85828601611ac9565b9150509250929050565b60005b83811015611b81578181015183820152602001611b69565b50506000910152565b6020815260008251806020840152611ba9816040850160208701611b66565b601f01601f19169190910160400192915050565b6001600160a01b0381168114610b4e57600080fd5b600060208284031215611be457600080fd5b8135611bef81611bbd565b9392505050565b60008083601f840112611c0857600080fd5b50813567ffffffffffffffff811115611c2057600080fd5b602083019150836020828501011115611c3857600080fd5b9250929050565b60008060008060008060608789031215611c5857600080fd5b863567ffffffffffffffff80821115611c7057600080fd5b611c7c8a838b01611bf6565b90985096506020890135915080821115611c9557600080fd5b611ca18a838b01611bf6565b90965094506040890135915080821115611cba57600080fd5b50611cc789828a01611bf6565b979a9699509497509295939492505050565b600060208284031215611ceb57600080fd5b5035919050565b60008060008060408587031215611d0857600080fd5b843567ffffffffffffffff80821115611d2057600080fd5b611d2c88838901611bf6565b90965094506020870135915080821115611d4557600080fd5b50611d5287828801611bf6565b95989497509550505050565b600080600060608486031215611d7357600080fd5b8335611d7e81611bbd565b9250602084013591506040840135611d9581611bbd565b809150509250925092565b60008060408385031215611db357600080fd5b823567ffffffffffffffff80821115611dcb57600080fd5b611dd786838701611ac9565b93506020850135915080821115611ded57600080fd5b50611b5c85828601611ac9565b600181811c90821680611e0e57607f821691505b602082108103611e2e57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611e4657600080fd5b8151611bef81611bbd565b600082601f830112611e6257600080fd5b8151611e70611ae882611aa1565b818152846020838601011115611e8557600080fd5b611e96826020830160208701611b66565b949350505050565b60008060008060008060c08789031215611eb757600080fd5b8651611ec281611bbd565b602088015190965063ffffffff81168114611edc57600080fd5b60408801516060890151919650945067ffffffffffffffff80821115611f0157600080fd5b611f0d8a838b01611e51565b94506080890151915080821115611f2357600080fd5b611f2f8a838b01611e51565b935060a0890151915080821115611f4557600080fd5b50611f5289828a01611e51565b9150509295509295509295565b60208082526021908201527f56616e69747955524c3a206f6e6c7920443144435632206e616d65206f776e656040820152603960f91b606082015260800190565b8183823760009101908152919050565b601f821115611ff657600081815260208120601f850160051c81016020861015611fd75750805b601f850160051c820191505b81811015610a2557828155600101611fe3565b505050565b67ffffffffffffffff83111561201357612013611a5a565b612027836120218354611dfa565b83611fb0565b6000601f84116001811461205b57600085156120435750838201355b600019600387901b1c1916600186901b1783556120b5565b600083815260209020601f19861690835b8281101561208c578685013582556020948501946001909201910161206c565b50868210156120a95760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b8181038181111561121957634e487b7160e01b600052601160045260246000fd5b600082516120ef818460208701611b66565b9190910192915050565b815167ffffffffffffffff81111561211357612113611a5a565b612127816121218454611dfa565b84611fb0565b602080601f83116001811461215c57600084156121445750858301515b600019600386901b1c1916600185901b178555610a25565b600085815260208120601f198616915b8281101561218b5788860151825594840194600190910190840161216c565b50858210156121a95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60018060a01b038316815260006020604081840152600084546121db81611dfa565b80604087015260606001808416600081146121fd576001811461221757612245565b60ff1985168984015283151560051b890183019550612245565b896000528660002060005b8581101561223d5781548b8201860152908301908801612222565b8a0184019650505b50939998505050505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea264697066735822122092b27f29437ffd76eae2e4b32a9111abccbdb707c7c53c4175ea8757275cc72964736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101355760003560e01c80638da5cb5b116100ab578063dce02fdb1161006f578063dce02fdb1461035c578063e3452cfb1461037c578063f1558de71461039c578063f2fde38b146103c9578063f3ad65f4146103e9578063f5dc7d561461040957600080fd5b80638da5cb5b146102b4578063b2867247146102e6578063c350a1b514610306578063d22da07514610326578063d6c5b8c91461033c57600080fd5b80633f4ba83a116100fd5780633f4ba83a146102115780635b9299cd146102265780635c975abb146102465780635de870c91461026a578063715018a61461028a5780638456cb591461029f57600080fd5b806305e66add1461013a57806328b431071461017057806330027f3b146101c75780633b513894146101e95780633ccfd60b146101fc575b600080fd5b34801561014657600080fd5b5061015a610155366004611b1f565b610429565b6040516101679190611b8a565b60405180910390f35b34801561017c57600080fd5b506101b961018b366004611b1f565b60cc602090815260009283526040909220815180830184018051928152908401929093019190912091525481565b604051908152602001610167565b3480156101d357600080fd5b506101e76101e2366004611bd2565b6104df565b005b6101e76101f7366004611c3f565b610543565b34801561020857600080fd5b506101e7610a2d565b34801561021d57600080fd5b506101e7610b51565b34801561023257600080fd5b506101e7610241366004611cd9565b610b63565b34801561025257600080fd5b5060655460ff165b6040519015158152602001610167565b34801561027657600080fd5b506101e7610285366004611cf2565b610b70565b34801561029657600080fd5b506101e7610f61565b3480156102ab57600080fd5b506101e7610f73565b3480156102c057600080fd5b506033546001600160a01b03165b6040516001600160a01b039091168152602001610167565b3480156102f257600080fd5b5061015a610301366004611cf2565b610f83565b34801561031257600080fd5b506101e7610321366004611d5e565b611062565b34801561033257600080fd5b506101b960cd5481565b34801561034857600080fd5b5061025a610357366004611da0565b6111bb565b34801561036857600080fd5b506101e7610377366004611cd9565b61121f565b34801561038857600080fd5b506101e7610397366004611c3f565b6112f4565b3480156103a857600080fd5b506101b96103b7366004611cd9565b60ca6020526000908152604090205481565b3480156103d557600080fd5b506101e76103e4366004611bd2565b6116a3565b3480156103f557600080fd5b5060c9546102ce906001600160a01b031681565b34801561041557600080fd5b5060ce546102ce906001600160a01b031681565b60cb60209081526000928352604090922081518083018401805192815290840192909301919091209152805461045e90611dfa565b80601f016020809104026020016040519081016040528092919081815260200182805461048a90611dfa565b80156104d75780601f106104ac576101008083540402835291602001916104d7565b820191906000526020600020905b8154815290600101906020018083116104ba57829003601f168201915b505050505081565b6104e7611719565b60ce546040516001600160a01b038084169216907fe03b0e59900b6347a6bdef98fe51689d53064c5235a2ca9fc10a27c497ec730790600090a360ce80546001600160a01b0319166001600160a01b0392909216919091179055565b61054b611773565b6105536117cc565b85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250845160208087019190912060c95460408051631177e3cf60e01b815290519297509395506001600160a01b03169350631177e3cf9260048082019392918290030181865afa1580156105db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ff9190611e34565b6040516375ba902160e11b8152600481018490529091506000906001600160a01b0383169063eb75204290602401600060405180830381865afa15801561064a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106729190810190611e9e565b50505050509050806001600160a01b0316336001600160a01b0316146106b35760405162461bcd60e51b81526004016106aa90611f5f565b60405180910390fd5b6104008711156107055760405162461bcd60e51b815260206004820152601960248201527f56616e69747955524c3a20616c69617320746f6f206c6f6e670000000000000060448201526064016106aa565b6104008511156107515760405162461bcd60e51b815260206004820152601760248201527656616e69747955524c3a2075726c20746f6f206c6f6e6760481b60448201526064016106aa565b60008a8a604051610763929190611fa0565b604051809103902090506107e08b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8f018190048102820181019092528d815292508d91508c90819084018382808284376000920191909152506111bb92505050565b1561082d5760405162461bcd60e51b815260206004820152601d60248201527f56616e69747955524c3a2075726c20616c72656164792065786973747300000060448201526064016106aa565b60cd54348111156108805760405162461bcd60e51b815260206004820152601f60248201527f56616e69747955524c3a20696e73756666696369656e74207061796d656e740060448201526064016106aa565b878760cb60008581526020019081526020016000208c8c6040516108a5929190611fa0565b908152602001604051809103902091826108c0929190611ffb565b504260cc60008481526020019081526020016000208b8b6040516108e5929190611fa0565b90815260405190819003602001902055600061090182346120bc565b9050801561099a57604051600090339083908381818185875af1925050503d806000811461094b576040519150601f19603f3d011682016040523d82523d6000602084013e610950565b606091505b50509050806109985760405162461bcd60e51b815260206004820152601460248201527363616e6e6f7420726566756e642065786365737360601b60448201526064016106aa565b505b88886040516109aa929190611fa0565b60405180910390208b8b6040516109c2929190611fa0565b60405180910390208e8e6040516109da929190611fa0565b604051908190038120338252907f13e9759ec5026e955e0e6d2ead4f13f2125d2d68a621346a3ed77c4aa5f28de19060200160405180910390a450505050505050610a256001609755565b505050505050565b6033546001600160a01b0316331480610a50575060ce546001600160a01b031633145b610aab5760405162461bcd60e51b815260206004820152602660248201527f443144433a206d757374206265206f776e6572206f7220726576656e7565206160448201526518d8dbdd5b9d60d21b60648201526084016106aa565b60ce546040516000916001600160a01b03169047908381818185875af1925050503d8060008114610af8576040519150601f19603f3d011682016040523d82523d6000602084013e610afd565b606091505b5050905080610b4e5760405162461bcd60e51b815260206004820152601860248201527f443144433a206661696c656420746f207769746864726177000000000000000060448201526064016106aa565b50565b610b59611719565b610b61611819565b565b610b6b611719565b60cd55565b610b786117cc565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250845160208087019190912060c95460408051631177e3cf60e01b815290519297509395506001600160a01b03169350631177e3cf9260048082019392918290030181865afa158015610c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c249190611e34565b6040516375ba902160e11b8152600481018490529091506000906001600160a01b0383169063eb75204290602401600060405180830381865afa158015610c6f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c979190810190611e9e565b50505050509050806001600160a01b0316336001600160a01b031614610ccf5760405162461bcd60e51b81526004016106aa90611f5f565b60008888604051610ce1929190611fa0565b60408051918290038220600081815260cb6020529182209093509091610d0a908a908a90611fa0565b90815260200160405180910390208054610d2390611dfa565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4f90611dfa565b8015610d9c5780601f10610d7157610100808354040283529160200191610d9c565b820191906000526020600020905b815481529060010190602001808311610d7f57829003601f168201915b50505050509050610e168a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b90819084018382808284376000920191909152506111bb92505050565b610e5b5760405162461bcd60e51b815260206004820152601660248201527515985b9a5d1e5554930e881a5b9d985b1a590815549360521b60448201526064016106aa565b80604051610e6991906120dd565b60405180910390208888604051610e81929190611fa0565b60405180910390208b8b604051610e99929190611fa0565b604051908190038120338252907f0ebb99856fe845dcc1e2291e7f2d8ac960cacfe58868974461990868583d62129060200160405180910390a46040518060200160405280600081525060cb60008481526020019081526020016000208989604051610f06929190611fa0565b90815260200160405180910390209081610f2091906120f9565b504260cc60008481526020019081526020016000208989604051610f45929190611fa0565b9081526040519081900360200190205550505050505050505050565b610f69611719565b610b61600061186b565b610f7b611719565b610b616118bd565b606060008585604051610f97929190611fa0565b60408051918290038220600081815260cb6020529190912090925090610fc09086908690611fa0565b90815260200160405180910390208054610fd990611dfa565b80601f016020809104026020016040519081016040528092919081815260200182805461100590611dfa565b80156110525780601f1061102757610100808354040283529160200191611052565b820191906000526020600020905b81548152906001019060200180831161103557829003601f168201915b5050505050915050949350505050565b600054610100900460ff16158080156110825750600054600160ff909116105b8061109c5750303b15801561109c575060005460ff166001145b6110ff5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106aa565b6000805460ff191660011790558015611122576000805461ff0019166101001790555b61112a6118fa565b611132611929565b61113a611958565b60c980546001600160a01b038087166001600160a01b03199283161790925560cd85905560ce80549285169290911691909117905580156111b5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b8151602080840191909120600081815260cc909252604080832090516111e29085906120dd565b90815260200160405180910390205460ca6000838152602001908152602001600020541115611212576000611215565b60015b9150505b92915050565b60c95460408051631177e3cf60e01b815290516000926001600160a01b031691631177e3cf9160048083019260209291908290030181865afa158015611269573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128d9190611e34565b9050336001600160a01b038216146112e05760405162461bcd60e51b81526020600482015260166024820152752b30b734ba3caaa9261d1037b7363c902218a221ab1960511b60448201526064016106aa565b50600090815260ca60205260409020429055565b6112fc6117cc565b85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250845160208087019190912060c95460408051631177e3cf60e01b815290519297509395506001600160a01b03169350631177e3cf9260048082019392918290030181865afa158015611384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a89190611e34565b6040516375ba902160e11b8152600481018490529091506000906001600160a01b0383169063eb75204290602401600060405180830381865afa1580156113f3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261141b9190810190611e9e565b50505050509050806001600160a01b0316336001600160a01b0316146114535760405162461bcd60e51b81526004016106aa90611f5f565b61040085111561149f5760405162461bcd60e51b815260206004820152601760248201527656616e69747955524c3a2075726c20746f6f206c6f6e6760481b60448201526064016106aa565b60008a8a6040516114b1929190611fa0565b6040518091039020905061152e8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8f018190048102820181019092528d815292508d91508c90819084018382808284376000920191909152506111bb92505050565b6115735760405162461bcd60e51b815260206004820152601660248201527515985b9a5d1e5554930e881a5b9d985b1a590815549360521b60448201526064016106aa565b8686604051611583929190611fa0565b6040518091039020898960405161159b929190611fa0565b60405180910390208c8c6040516115b3929190611fa0565b60405180910390207fb50e10d60f9b32ef3d334612dab67fef5b70a8634f47d76d0ed93a7729fec3353360cb60008781526020019081526020016000208e8e604051611600929190611fa0565b90815260405190819003602001812061161992916121b9565b60405180910390a4868660cb60008481526020019081526020016000208b8b604051611646929190611fa0565b90815260200160405180910390209182611661929190611ffb565b504260cc60008381526020019081526020016000208a8a604051611686929190611fa0565b908152604051908190036020019020555050505050505050505050565b6116ab611719565b6001600160a01b0381166117105760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106aa565b610b4e8161186b565b6033546001600160a01b03163314610b615760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106aa565b6002609754036117c55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106aa565b6002609755565b60655460ff1615610b615760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106aa565b6001609755565b611821611987565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6118c56117cc565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861184e3390565b600054610100900460ff166119215760405162461bcd60e51b81526004016106aa90612254565b610b616119d0565b600054610100900460ff166119505760405162461bcd60e51b81526004016106aa90612254565b610b61611a03565b600054610100900460ff1661197f5760405162461bcd60e51b81526004016106aa90612254565b610b61611a33565b60655460ff16610b615760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106aa565b600054610100900460ff166119f75760405162461bcd60e51b81526004016106aa90612254565b6065805460ff19169055565b600054610100900460ff16611a2a5760405162461bcd60e51b81526004016106aa90612254565b610b613361186b565b600054610100900460ff166118125760405162461bcd60e51b81526004016106aa90612254565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a9957611a99611a5a565b604052919050565b600067ffffffffffffffff821115611abb57611abb611a5a565b50601f01601f191660200190565b600082601f830112611ada57600080fd5b8135611aed611ae882611aa1565b611a70565b818152846020838601011115611b0257600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215611b3257600080fd5b82359150602083013567ffffffffffffffff811115611b5057600080fd5b611b5c85828601611ac9565b9150509250929050565b60005b83811015611b81578181015183820152602001611b69565b50506000910152565b6020815260008251806020840152611ba9816040850160208701611b66565b601f01601f19169190910160400192915050565b6001600160a01b0381168114610b4e57600080fd5b600060208284031215611be457600080fd5b8135611bef81611bbd565b9392505050565b60008083601f840112611c0857600080fd5b50813567ffffffffffffffff811115611c2057600080fd5b602083019150836020828501011115611c3857600080fd5b9250929050565b60008060008060008060608789031215611c5857600080fd5b863567ffffffffffffffff80821115611c7057600080fd5b611c7c8a838b01611bf6565b90985096506020890135915080821115611c9557600080fd5b611ca18a838b01611bf6565b90965094506040890135915080821115611cba57600080fd5b50611cc789828a01611bf6565b979a9699509497509295939492505050565b600060208284031215611ceb57600080fd5b5035919050565b60008060008060408587031215611d0857600080fd5b843567ffffffffffffffff80821115611d2057600080fd5b611d2c88838901611bf6565b90965094506020870135915080821115611d4557600080fd5b50611d5287828801611bf6565b95989497509550505050565b600080600060608486031215611d7357600080fd5b8335611d7e81611bbd565b9250602084013591506040840135611d9581611bbd565b809150509250925092565b60008060408385031215611db357600080fd5b823567ffffffffffffffff80821115611dcb57600080fd5b611dd786838701611ac9565b93506020850135915080821115611ded57600080fd5b50611b5c85828601611ac9565b600181811c90821680611e0e57607f821691505b602082108103611e2e57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611e4657600080fd5b8151611bef81611bbd565b600082601f830112611e6257600080fd5b8151611e70611ae882611aa1565b818152846020838601011115611e8557600080fd5b611e96826020830160208701611b66565b949350505050565b60008060008060008060c08789031215611eb757600080fd5b8651611ec281611bbd565b602088015190965063ffffffff81168114611edc57600080fd5b60408801516060890151919650945067ffffffffffffffff80821115611f0157600080fd5b611f0d8a838b01611e51565b94506080890151915080821115611f2357600080fd5b611f2f8a838b01611e51565b935060a0890151915080821115611f4557600080fd5b50611f5289828a01611e51565b9150509295509295509295565b60208082526021908201527f56616e69747955524c3a206f6e6c7920443144435632206e616d65206f776e656040820152603960f91b606082015260800190565b8183823760009101908152919050565b601f821115611ff657600081815260208120601f850160051c81016020861015611fd75750805b601f850160051c820191505b81811015610a2557828155600101611fe3565b505050565b67ffffffffffffffff83111561201357612013611a5a565b612027836120218354611dfa565b83611fb0565b6000601f84116001811461205b57600085156120435750838201355b600019600387901b1c1916600186901b1783556120b5565b600083815260209020601f19861690835b8281101561208c578685013582556020948501946001909201910161206c565b50868210156120a95760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b8181038181111561121957634e487b7160e01b600052601160045260246000fd5b600082516120ef818460208701611b66565b9190910192915050565b815167ffffffffffffffff81111561211357612113611a5a565b612127816121218454611dfa565b84611fb0565b602080601f83116001811461215c57600084156121445750858301515b600019600386901b1c1916600185901b178555610a25565b600085815260208120601f198616915b8281101561218b5788860151825594840194600190910190840161216c565b50858210156121a95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60018060a01b038316815260006020604081840152600084546121db81611dfa565b80604087015260606001808416600081146121fd576001811461221757612245565b60ff1985168984015283151560051b890183019550612245565b896000528660002060005b8581101561223d5781548b8201860152908301908801612222565b8a0184019650505b50939998505050505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea264697066735822122092b27f29437ffd76eae2e4b32a9111abccbdb707c7c53c4175ea8757275cc72964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "addressRegistry": {
        "details": "AddressRegistry contract"
      },
      "nameOwnerUpdateAt": {
        "details": "D1DCV2 TokenId -> Timestamp the name owner was updated"
      },
      "revenueAccount": {
        "details": "Fee withdrawal address"
      },
      "urlUpdatePrice": {
        "details": "Price for the url update"
      },
      "vanityURLUpdatedAt": {
        "details": "D1DCV2 Token Id -> Alias Name -> Timestamp the URL was updatedVanity URL is valid only if nameOwnerUpdateAt <= vanityURLUpdatedAt"
      },
      "vanityURLs": {
        "details": "D1DCV2 TokenId -> Alias Name -> URL"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 825,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 426,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 441,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 499,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 843,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "addressRegistry",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IAddressRegistry)1418"
      },
      {
        "astId": 848,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "nameOwnerUpdateAt",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 855,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "vanityURLs",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))"
      },
      {
        "astId": 862,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "vanityURLUpdatedAt",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_uint256))"
      },
      {
        "astId": 865,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "urlUpdatePrice",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 868,
        "contract": "contracts/VanityURL.sol:VanityURL",
        "label": "revenueAccount",
        "offset": 0,
        "slot": "206",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressRegistry)1418": {
        "encoding": "inplace",
        "label": "contract IAddressRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(string => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(string => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
